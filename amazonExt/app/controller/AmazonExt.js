/*
 * File: app/controller/AmazonExt.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('amzExt.controller.AmazonExt', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'txtEmail',
            selector: '#txtEmail'
        },
        {
            ref: 'txtPass',
            selector: '#txtPass'
        },
        {
            ref: 'cboCategory',
            selector: 'cboCategory'
        },
        {
            ref: 'txtSearch',
            selector: '#txtSearch'
        }
    ],

    onLoginClick: function(button) {
        console.log('Click on SignIn button');
        var userName = this.getTxtEmail().getValue();
        var userPass = this.getTxtPass().getValue();

        //Change to 2nd view
        this.application.viewport.layout.setActiveItem(1);

        this.getTxtEmail().setValue("");
        this.getTxtPass().setValue("");
    },

    init: function(application) {
        console.log('Init');
        this.control({
            "#signIn" : {
                click : this.onLoginClick
            },

            "#rdoNo" : {
                change: this.onRdgChange
            },

            "#signOut" : {
                click: this.onLoginOutClick
            },

            "#btnGoSearch" : {
                click : this.onSearchClick
            }
        });
    },

    onRdgChange: function(radiofield) {
        console.log('Change radiogroup');
        if(radiofield.checked==true){
            //console.log(txtPassword);
            txtPassword.disabled = true;
            txtPassword.className = txtPassword.className + 'inputPass';
        }else{
            txtPassword.disabled = false;
            txtPassword.className = txtPassword.className.replace( /(?:^|\s)inputPass(?!\S)/g , '' );
        }
    },

    onLoginOutClick: function(button) {
        console.log('Click on SignOut button');
        this.application.viewport.layout.setActiveItem(0);
    },

    onSearchClick: function(button) {
        console.log('ClickSearch');

        var productToSearch = this.getTxtSearch().getValue().toLowerCase();
        var valCateg = Ext.getCmp('cboCategory').getValue();

        //console.log(Ext.getStore('Product'));
        //console.log(cboCateg);
        var storeProduct = Ext.getStore('Product');
        //storeProduct.load();
        var productsView = Ext.getCmp('productsView');
        //console.log(productsView.store);

        //storeProduct.clearFilter();
        /*storeProduct.load().filterBy(function(rec){
        console.log(productToSearch);
        console.log(rec.get('name').toLowerCase().indexOf(productToSearch) > -1);
        return rec.get('name').toLowerCase().indexOf(productToSearch) > -1;
        });*/

        /*storeProduct.load({
        url:'data/product.json'
        });*/

        /*console.log(storeProduct.load({
        url:'data/product.json'
        }).find('name',productToSearch));*/

        /*productsView.load({
        callback: function(rs) {
        console.log(rs);
        console.log('name:');
        console.log(this.find('name', productToSearch));
        }
        });*/

        /*storeProduct.load().filter([
        {filterFn: function(item) 
        { 
        console.log(item.get('name'));
        return item.get('name') == productToSearch; 
        }
        }
        ]);*/

        /*storeProduct.load().filterBy(function(record,id){

        return (record.get('name') == productToSearch && record.get('category') == valCateg);
        });*/

        /*storeProduct.reload().filter([
        {property: "category", value: valCateg},
        //{property: "name", value: productToSearch}
        {filterFn: function(rec) {
            return rec.get('name').indexOf(productToSearch) > -1;
        }}]);*/


        /*storeProduct.filterBy(function(rec,id){
        console.log(rec.get('name').toLowerCase());
        //return rec.get('name').toLowerCase().indexOf(productToSearch) > -1;
        return rec.get('category') == valCateg;
    });*/


    /*storeProduct.load({
    filters:[
    {property: "category", value: valCateg},
    {filterFn: function(rec) { return rec.get('stock').toLowerCase().indexOf(productToSearch) > -1; }}
    ]  
    });*/


    /*storeProduct.filter([
    Ext.create('Ext.util.Filter', {property: "category", value: valCateg, root: 'data'}),
    Ext.create('Ext.util.Filter', {filterFn: function(rec) { return rec.get('name').toLowerCase().indexOf(productToSearch) > -1; }, root: 'data'})
    ]);*/
    //productsView.store = storeProduct.load();

    console.log(productToSearch);
    console.log(valCateg);

    storeProduct.clearFilter(true);

    storeProduct.load().filter([
    //{property: "category", value: valCateg},
    {filterFn: function(rec){
        if(valCateg==1 || valCateg === null) 
        return rec.get('name').toLowerCase().indexOf(productToSearch) > -1;
        else
        return rec.get('name').toLowerCase().indexOf(productToSearch) > -1 && rec.get('category') == valCateg;
    }
            }
            ]);


            //storeProduct.load();

    }

});
